/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router';

// Import Routes

import { Route as rootRoute } from './routes/__root';
import { Route as IndexImport } from './routes/index';

// Create Virtual Routes

const AboutLazyImport = createFileRoute('/about')();
const AuthLoginLazyImport = createFileRoute('/auth/login')();
const ProtectedProductsLazyImport = createFileRoute('/_protected/products')();
const ProtectedMainLazyImport = createFileRoute('/_protected/main')();

// Create/Update Routes

const AboutLazyRoute = AboutLazyImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute
} as any).lazy(() => import('./routes/about.lazy').then((d) => d.Route));

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute
} as any);

const AuthLoginLazyRoute = AuthLoginLazyImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => rootRoute
} as any).lazy(() => import('./routes/auth/login.lazy').then((d) => d.Route));

const ProtectedProductsLazyRoute = ProtectedProductsLazyImport.update({
  id: '/_protected/products',
  path: '/products',
  getParentRoute: () => rootRoute
} as any).lazy(() =>
  import('./routes/_protected/products.lazy').then((d) => d.Route)
);

const ProtectedMainLazyRoute = ProtectedMainLazyImport.update({
  id: '/_protected/main',
  path: '/main',
  getParentRoute: () => rootRoute
} as any).lazy(() =>
  import('./routes/_protected/main.lazy').then((d) => d.Route)
);

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof IndexImport;
      parentRoute: typeof rootRoute;
    };
    '/about': {
      id: '/about';
      path: '/about';
      fullPath: '/about';
      preLoaderRoute: typeof AboutLazyImport;
      parentRoute: typeof rootRoute;
    };
    '/_protected/main': {
      id: '/_protected/main';
      path: '/main';
      fullPath: '/main';
      preLoaderRoute: typeof ProtectedMainLazyImport;
      parentRoute: typeof rootRoute;
    };
    '/_protected/products': {
      id: '/_protected/products';
      path: '/products';
      fullPath: '/products';
      preLoaderRoute: typeof ProtectedProductsLazyImport;
      parentRoute: typeof rootRoute;
    };
    '/auth/login': {
      id: '/auth/login';
      path: '/auth/login';
      fullPath: '/auth/login';
      preLoaderRoute: typeof AuthLoginLazyImport;
      parentRoute: typeof rootRoute;
    };
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute;
  '/about': typeof AboutLazyRoute;
  '/main': typeof ProtectedMainLazyRoute;
  '/products': typeof ProtectedProductsLazyRoute;
  '/auth/login': typeof AuthLoginLazyRoute;
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute;
  '/about': typeof AboutLazyRoute;
  '/main': typeof ProtectedMainLazyRoute;
  '/products': typeof ProtectedProductsLazyRoute;
  '/auth/login': typeof AuthLoginLazyRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  '/': typeof IndexRoute;
  '/about': typeof AboutLazyRoute;
  '/_protected/main': typeof ProtectedMainLazyRoute;
  '/_protected/products': typeof ProtectedProductsLazyRoute;
  '/auth/login': typeof AuthLoginLazyRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: '/' | '/about' | '/main' | '/products' | '/auth/login';
  fileRoutesByTo: FileRoutesByTo;
  to: '/' | '/about' | '/main' | '/products' | '/auth/login';
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/_protected/main'
    | '/_protected/products'
    | '/auth/login';
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  AboutLazyRoute: typeof AboutLazyRoute;
  ProtectedMainLazyRoute: typeof ProtectedMainLazyRoute;
  ProtectedProductsLazyRoute: typeof ProtectedProductsLazyRoute;
  AuthLoginLazyRoute: typeof AuthLoginLazyRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutLazyRoute: AboutLazyRoute,
  ProtectedMainLazyRoute: ProtectedMainLazyRoute,
  ProtectedProductsLazyRoute: ProtectedProductsLazyRoute,
  AuthLoginLazyRoute: AuthLoginLazyRoute
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/_protected/main",
        "/_protected/products",
        "/auth/login"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/about": {
      "filePath": "about.lazy.tsx"
    },
    "/_protected/main": {
      "filePath": "_protected/main.lazy.tsx"
    },
    "/_protected/products": {
      "filePath": "_protected/products.lazy.tsx"
    },
    "/auth/login": {
      "filePath": "auth/login.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
